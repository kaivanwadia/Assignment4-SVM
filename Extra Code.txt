%     Get the Mean matrix and the Eigen vectors of the reduced training images
%     [Mean, EVectors, EValues] = hw1FindEigendigits(TrainingImgs);
%     currentSum = 0;
%     eigenSum = sum(EValues);
%     numEigen = 0;
%     for i = 1:size(EValues, 1)
%         eigenValue = EValues(i,1);
%         currentSum = currentSum + eigenValue;
%         if (currentSum/eigenSum > 0.99)
%             numEigen = i;
%             break;
%         end
%     end
%     EVecReduced = EVectors(:,1:150);
%     EVecReduced = EVectors(:,1:numEigen);

%     numTrainImgsToClassify = trainingSize;
%     [TrainImgsToClassify, TrainingArrayClassify] = SelectTrainingSamples(trainImages, numTrainImgsToClassify);
%     AMat = bsxfun(@minus, double(TrainImgsToClassify), Mean);
%     ProjectedTrainingImgs = (EVecReduced')*double(AMat);
%     ReclaimedTrainImgs = EVecReduced * ProjectedTrainingImgs;
    
%     ProjectedTestImgs = (EVecReduced') * double(HardTestSet);
%     ProjectedTestLabels = HardTestLabels;
%     ReclaimedTestImgs =  EVecReduced * ProjectedTestImgs;
%     K = 3;
%     [Accuracy , testImgLabels] = CalculateAccuracy(ProjectedTrainingImgs', ProjectedTestImgs', TrainingArrayClassify, trainLabels, ProjectedTestLabels, K);
%     AccArray = [AccArray, Accuracy];